
"""array of string

Revision ID: f3443f12f6bb
Revises: f71c3048e00f
Create Date: 2025-05-30 11:27:07.598392

"""

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "f3443f12f6bb"
down_revision = "f71c3048e00f"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("orgdata")
    op.drop_table("matchbvdid")
    op.alter_column(
        "management_association",
        "id",
        existing_type=sa.INTEGER(),
        nullable=True,
        autoincrement=True,
    )
    op.alter_column(
        "management_association",
        "associated_ens_id",
        existing_type=sa.TEXT(),
        type_=sa.ARRAY(sa.String()),
        existing_nullable=True,
    )
    op.create_index(op.f("ix_users_table_id"), "users_table", ["id"], unique=False)
    op.alter_column(
        "webhook_response",
        "response",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=sa.String(length=50),
        nullable=True,
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "webhook_response",
        "response",
        existing_type=sa.String(length=50),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        nullable=False,
    )
    op.drop_index(op.f("ix_users_table_id"), table_name="users_table")
    op.alter_column(
        "management_association",
        "associated_ens_id",
        existing_type=sa.ARRAY(sa.String()),
        type_=sa.TEXT(),
        existing_nullable=True,
    )
    op.alter_column(
        "management_association",
        "id",
        existing_type=sa.INTEGER(),
        nullable=False,
        autoincrement=True,
    )
    op.create_table(
        "matchbvdid",
        sa.Column("bvdid", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "name_international",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("address", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "postcode", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
        sa.Column("city", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "country", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "phone_or_fax", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "email_or_website",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "national_id", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column("state", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "address_type", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "ens_id", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("ens_id", name="matchbvdid_pkey"),
    )
    op.create_table(
        "orgdata",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "orgname", sa.VARCHAR(length=100), autoincrement=False, nullable=False
        ),
        sa.Column(
            "orgidentifier", sa.VARCHAR(length=100), autoincrement=False, nullable=False
        ),
        sa.Column("bvdids", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="orgdata_pkey"),
        sa.UniqueConstraint("bvdids", name="orgdata_bvdids_key"),
        sa.UniqueConstraint("orgidentifier", name="orgdata_orgidentifier_key"),
    )
    # ### end Alembic commands ###
